#!/usr/bin/env python3
"""Script d'installation des capacit√©s multimodales."""

import subprocess
import sys
import os
from pathlib import Path


def run_command(command: str, description: str = ""):
    """Ex√©cute une commande et affiche le r√©sultat."""
    print(f"\n{'='*50}")
    if description:
        print(f"üì¶ {description}")
    print(f"üîß Ex√©cution: {command}")
    print('='*50)

    try:
        result = subprocess.run(
            command,
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        if e.stderr:
            print(f"   D√©tails: {e.stderr}")
        return False


def check_python_version():
    """V√©rifie la version de Python."""
    print("üêç V√©rification de Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python {version.major}.{version.minor} d√©tect√©. Python 3.8+ requis.")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} d√©tect√©")
    return True


def install_core_dependencies():
    """Installe les d√©pendances de base."""
    print("\nüöÄ Installation des d√©pendances de base...")

    # Installation de PyTorch (avec CUDA si disponible)
    success = run_command(
        "pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118",
        "Installation de PyTorch (avec CUDA 11.8)"
    )

    if not success:
        print("‚ö†Ô∏è √âchec de l'installation CUDA, tentative avec CPU uniquement...")
        success = run_command(
            "pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu",
            "Installation de PyTorch (CPU uniquement)"
        )

    if not success:
        print("‚ùå Impossible d'installer PyTorch")
        return False

    # Installation des transformers
    success = run_command(
        "pip install transformers accelerate",
        "Installation de Transformers"
    )

    if not success:
        return False

    return True


def install_vision_dependencies():
    """Installe les d√©pendances pour le traitement d'images."""
    print("\nüñºÔ∏è Installation des d√©pendances vision...")

    packages = [
        "Pillow",
        "opencv-python",
        "scikit-image",
        "matplotlib"
    ]

    command = f"pip install {' '.join(packages)}"
    return run_command(command, "Installation des biblioth√®ques de vision")


def install_audio_dependencies():
    """Installe les d√©pendances pour le traitement audio."""
    print("\nüéµ Installation des d√©pendances audio...")

    packages = [
        "librosa",
        "soundfile",
        "pyaudio"
    ]

    command = f"pip install {' '.join(packages)}"
    return run_command(command, "Installation des biblioth√®ques audio")


def install_ocr_dependencies():
    """Installe les d√©pendances OCR (optionnel)."""
    print("\nüìù Installation d'EasyOCR (optionnel)...")

    try:
        success = run_command("pip install easyocr", "Installation d'EasyOCR")
        if success:
            print("‚úÖ OCR install√© avec succ√®s")
        else:
            print("‚ö†Ô∏è OCR non install√© (optionnel)")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible d'installer OCR: {e}")
        return True  # Non critique


def install_tts_dependencies():
    """Installe les d√©pendances TTS."""
    print("\nüó£Ô∏è Installation des d√©pendances TTS...")

    packages = [
        "pyttsx3",
        "gTTS"
    ]

    command = f"pip install {' '.join(packages)}"
    return run_command(command, "Installation des biblioth√®ques TTS")


def install_scientific_dependencies():
    """Installe les d√©pendances scientifiques."""
    print("\nüî¨ Installation des d√©pendances scientifiques...")

    packages = [
        "numpy",
        "scipy",
        "scikit-learn",
        "pandas"
    ]

    command = f"pip install {' '.join(packages)}"
    return run_command(command, "Installation des biblioth√®ques scientifiques")


def install_dev_dependencies():
    """Installe les d√©pendances de d√©veloppement."""
    print("\nüõ†Ô∏è Installation des d√©pendances de d√©veloppement...")

    packages = [
        "pytest",
        "pytest-mock",
        "pytest-cov",
        "black",
        "isort",
        "flake8",
        "mypy"
    ]

    command = f"pip install {' '.join(packages)}"
    return run_command(command, "Installation des outils de d√©veloppement")


def install_config_dependencies():
    """Installe les d√©pendances de configuration."""
    print("\n‚öôÔ∏è Installation des d√©pendances de configuration...")

    packages = [
        "pyyaml",
        "loguru"
    ]

    command = f"pip install {' '.join(packages)}"
    return run_command(command, "Installation des biblioth√®ques de configuration")


def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires."""
    print("\nüìÅ Cr√©ation des r√©pertoires...")

    directories = [
        "models",
        "temp",
        "logs",
        "config",
        "data",
        "examples"
    ]

    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Cr√©√©: {directory}/")

    return True


def test_installation():
    """Teste l'installation en important les modules principaux."""
    print("\nüß™ Test de l'installation...")

    try:
        import torch
        print(f"‚úÖ PyTorch {torch.__version__} install√©")

        import transformers
        print(f"‚úÖ Transformers {transformers.__version__} install√©")

        import PIL
        print(f"‚úÖ Pillow {PIL.__version__} install√©")

        import librosa
        print(f"‚úÖ Librosa {librosa.__version__} install√©")

        import numpy as np
        print(f"‚úÖ NumPy {np.__version__} install√©")

        import sklearn
        print(f"‚úÖ Scikit-learn {sklearn.__version__} install√©")

        # Test des processeurs multimodaux
        try:
            from src.multimodal import VisionProcessor, AudioProcessor
            print("‚úÖ Processeurs multimodaux import√©s avec succ√®s")
        except ImportError as e:
            print(f"‚ö†Ô∏è Processeurs non disponibles: {e}")

        return True

    except ImportError as e:
        print(f"‚ùå Erreur d'importation: {e}")
        return False


def main():
    """Fonction principale d'installation."""
    print("üéØ Installation des Capacit√©s Multimodales")
    print("=" * 60)

    # V√©rification de Python
    if not check_python_version():
        sys.exit(1)

    # Cr√©ation des r√©pertoires
    if not create_directories():
        print("‚ùå Impossible de cr√©er les r√©pertoires")
        sys.exit(1)

    # Installation des d√©pendances
    steps = [
        ("D√©pendances de base", install_core_dependencies),
        ("Vision", install_vision_dependencies),
        ("Audio", install_audio_dependencies),
        ("OCR", install_ocr_dependencies),
        ("TTS", install_tts_dependencies),
        ("Scientifique", install_scientific_dependencies),
        ("Configuration", install_config_dependencies),
        ("D√©veloppement", install_dev_dependencies)
    ]

    failed_steps = []

    for step_name, step_func in steps:
        print(f"\nüîÑ √âtape: {step_name}")
        if not step_func():
            failed_steps.append(step_name)
            print(f"‚ö†Ô∏è √âchec de l'√©tape: {step_name}")

    # Test final
    print("\n" + "=" * 60)
    if test_installation():
        print("üéâ Installation termin√©e avec succ√®s !")

        if failed_steps:
            print(f"\n‚ö†Ô∏è √âtapes ayant √©chou√© (non critiques): {', '.join(failed_steps)}")

        print("\nüöÄ Prochaines √©tapes:")
        print("1. Ex√©cutez: python examples/multimodal_demo.py")
        print("2. Consultez: MULTIMODAL_README.md")
        print("3. Lancez les tests: python -m pytest src/multimodal/tests/")

    else:
        print("‚ùå Installation incompl√®te. V√©rifiez les erreurs ci-dessus.")
        sys.exit(1)


if __name__ == "__main__":
    main()